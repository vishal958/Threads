import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}

export function swapTags(text: string) {
  let displayText = text;
  const tags = text.match(/@\{\{[^\}]+\}\}/gi) || [];
  const mentions: string[] = []

  tags.forEach((myTag) => {
    const tagData = myTag.slice(3, -2);
    const tagDataArray = tagData.split('||');
    const tagDisplayValue = tagDataArray[2];
    const tagId = tagDataArray[1]
    if (!mentions.includes(tagId)) {
      mentions.push(tagId)
    }
    const regex = new RegExp(escapeRegExp(myTag), 'gi');
    displayText = displayText.replace(regex, `<a href=/profile/${tagId}>${tagDisplayValue}</a>`);
  });

  return { displayText, mentions };
}

export function getUsersFromTags(text: string) {
  const tags = text.match(/@\{\{[^\}]+\}\}/gi) || [];

  const allUserIds = tags.map((myTag) => {
    const tagData = myTag.slice(3, -2);
    const tagDataArray = tagData.split('||');
    return { _id: tagDataArray[1], name: tagDataArray[2] };
  });

  const uniqueUsers: any[] = [];
  allUserIds.forEach((myUser) => {
    if (!uniqueUsers.some((user) => user._id === myUser._id)) {
      uniqueUsers.push(myUser);
    }
  });

  return uniqueUsers;
}

function escapeRegExp(string: string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
